{"version":3,"names":[],"mappings":"","sources":["components/slider-max.js"],"sourcesContent":["export function makeSlider(params) {\r\n\r\n    const {destinationClass, imagesPaths, carouselWidth, carouselHeight, imgWidth, bgMoveSpeed, timeToBgMove, inertiaStep, inertiaSensivity } = params;\r\n    const carousel = document.querySelector('.'+destinationClass)\r\n    const totalImages = imagesPaths.length; \r\n    \r\n    let mouseEnterPoint, dxMouse = 0; //mouseX - start amoun X of mouse when button pressed, dxMouse - the difference between mouseX and current mouse X position \r\n    let dxRibbon = -imgWidth*2 + (carouselWidth - imgWidth)/2; //offset of Ribbon\r\n    let move = false; //is gallery moving now\r\n    let picsArray = [1,2,3,4,5]; //the array length=5 for images to show\r\n    let basePic = totalImages - 2; //the order of the first picture in picsArray\r\n    const carouselCenter = dxRibbon;\r\n    //offsetMax = max offset of image (left or right)\r\n    \r\n    let inertiaCurrentMouseX; //current mouse x coordinate\r\n    let inertiaPreviousMouseX; //last iteration mouse x coordinate\r\n    let inertiaSpeedX = 0; //speed of moving while inertia, decreasing by *inertiaStep\r\n    let inertiaCounter; //setinterval for declining speed while inertia\r\n    let carouselInertionTimer; //setinterva for calculating mouse speed\r\n    \r\n    \r\n    let bgMove; //moving without dragging, speed\r\n    let bgMoveCounter; //setinterval for background movement\r\n    let bgMoveCoundown; //setTimeout for background movement restore\r\n    \r\n    //creation the carousel html and styles\r\n    carousel.style.maxWidth = carouselWidth + 'px';\r\n    carousel.style.height = carouselHeight + 'px';\r\n    carousel.style.position = 'relative';\r\n    carousel.style.overflow = 'hidden';\r\n    carousel.style.whiteSpace = 'nowrap';\r\n    carousel.style.userSelect = 'none';\r\n    carousel.style.boxSizing = 'border-box';\r\n    \r\n    let listeners = [] //all listeners\r\n    \r\n    carousel.innerHTML = `\r\n        <div class=\"${destinationClass}-images-container\">\r\n            ${picsArray.map((el) => {\r\n                return (`\r\n                <div class=\"${destinationClass}-img-container\">\r\n                </div>\r\n                `)\r\n            }).join('')}\r\n        </div>`\r\n    \r\n    const ribbonImages = document.querySelector(`.${destinationClass}-images-container`); //The container for all 5 images\r\n    const imgContainerList = document.querySelectorAll(`.${destinationClass}-img-container`); //The list of all 5 containers\r\n    \r\n    \r\n    //styles injection\r\n    ribbonImages.style.cssText = `\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        position: relative;\r\n        width: auto;\r\n        display: inline-block;\r\n        pointer-events: none;\r\n    `\r\n    \r\n    imgContainerList.forEach((el) => {\r\n        el.style.cssText = `\r\n            width: ${imgWidth}px;\r\n            height: ${carouselHeight}px;\r\n            margin-left: 0px; \r\n            margin-right: 0px;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            overflow: hidden;\r\n            pointer-events: none;\r\n    \r\n            border: 1px solid green;\r\n            background-size: auto 100%;\r\n            background-position: 50% center;\r\n        `\r\n    })\r\n    \r\n    \r\n    \r\n    const changePicsOrder = (direction) => { //change pictures to show in picsArray and show them. Filled from imagesPaths\r\n        if (direction === '+') { //pictures offset when moving left\r\n            (basePic > totalImages -1) ? basePic = 1 : basePic++\r\n        }\r\n        if (direction === '-') {//pictures offset when moving right\r\n            (basePic < 1) ? basePic = totalImages-1 : basePic--\r\n        }\r\n        \r\n        for (var index = 0; index < 5; index++) {\r\n            picsArray[index] = (basePic+index < totalImages) ? imagesPaths[index+basePic] : imagesPaths[basePic+index - totalImages] \r\n        }\r\n        \r\n    \r\n        imgContainerList.forEach((el, index) => {  //change all 5 images to show in imagesList\r\n            el.style.backgroundImage = `url(${picsArray[index]}`;\r\n        })\r\n    \r\n    }\r\n    \r\n    \r\n    const changeImgOffset = (currentPos) => { //changing offset for all pictures\r\n        imgContainerList.forEach((el, index) => {\r\n                let centerDx = currentPos - carouselCenter - (imgWidth)*(2-index); //the offset between central position and current position\r\n                let k = 50 + 50/((carouselWidth + imgWidth) / 2) * centerDx;\r\n                el.style.backgroundPosition = `${k}% center`;\r\n        })\r\n    }\r\n    \r\n    \r\n    const redrawCarousel = (dx) => { //changing the position of ribbonImages\r\n        if (dx + dxRibbon > -(imgWidth - (carouselWidth-imgWidth)/2)) { //if the offset is more than 1 picture width\r\n            dxRibbon = dxRibbon - imgWidth; \r\n            changePicsOrder('-');\r\n    \r\n        }\r\n        if (dx + dxRibbon < -(imgWidth)*3 + (carouselWidth-imgWidth)/2  ) { //if the offset is more than 1 picture width\r\n            dxRibbon = dxRibbon + imgWidth; \r\n            changePicsOrder('+');\r\n        }\r\n        \r\n        ribbonImages.style.left = `${dx + dxRibbon}px`; //change ribbon position\r\n        changeImgOffset(dx + dxRibbon); //change images offset\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function mouseDownActions(e) {\r\n        clearInterval(inertiaCounter); //stop the inertia\r\n        clearTimeout(bgMoveCoundown); //stop the countdown\r\n        bgMove = 0;\r\n        move = true;\r\n        mouseEnterPoint = e.offsetX;\r\n        carousel.classList.add(`${destinationClass}_grabbed`);\r\n    }\r\n    \r\n    carousel.addEventListener('mousedown', e => mouseDownActions(e))\r\n    \r\n    \r\n    \r\n    \r\n    function mouseMoveActions(e) {\r\n        if (move) {\r\n            dxMouse = e.offsetX - mouseEnterPoint;\r\n            redrawCarousel(dxMouse);\r\n        }\r\n    }\r\n    \r\n    carousel.addEventListener('mousemove', e => mouseMoveActions(e))\r\n    \r\n    \r\n    \r\n    \r\n    function inertiaMovement(dx) {\r\n        clearInterval(inertiaCounter); //fix bug when some timers start simultaniously\r\n    \r\n        inertiaCounter = setInterval((e) => {\r\n            dx = dx * inertiaStep;\r\n            if (Math.abs(dx) <= 1) {\r\n                inertiaSpeedX = 0;\r\n                clearInterval(inertiaCounter);\r\n            } else {\r\n                dxRibbon = dxRibbon - dx/25;\r\n                redrawCarousel(0);\r\n            }\r\n        }, 1);\r\n    }\r\n    \r\n    \r\n    function bgMovement(dx) {\r\n        clearInterval(bgMoveCounter);\r\n        bgMoveCounter = setInterval((e) => {\r\n            if (bgMove === 0) {\r\n                clearInterval(bgMoveCounter);\r\n            } else {\r\n                dxRibbon = dxRibbon - dx/25;\r\n                redrawCarousel(0);\r\n            }\r\n        }, 1);\r\n    }\r\n    \r\n    \r\n    const stopMove = (e) => { //stop move the carousel\r\n        move = false;\r\n        dxRibbon = dxRibbon + dxMouse; //fixing the offset\r\n        dxMouse = 0; \r\n     \r\n        inertiaSpeedX = inertiaPreviousMouseX - inertiaCurrentMouseX ;\r\n        if (Math.abs(inertiaSpeedX) > inertiaSensivity) { //has an inertion\r\n            inertiaMovement(inertiaSpeedX);\r\n        }\r\n        carousel.classList.remove(`${destinationClass}_grabbed`)\r\n    \r\n        //timeToBgMove\r\n        bgMoveCoundown = setTimeout((e) => {\r\n            bgMove = bgMoveSpeed;\r\n            bgMovement(bgMove);\r\n        }, timeToBgMove);\r\n    }\r\n    \r\n    \r\n    \r\n    carousel.addEventListener('mouseup', e => stopMove(e));\r\n    carousel.addEventListener('mouseout', e => stopMove(e));\r\n    \r\n    carouselInertionTimer = setInterval((e) => { //check mouse speed every 100ms\r\n        inertiaPreviousMouseX = inertiaCurrentMouseX;\r\n        inertiaCurrentMouseX = dxMouse;\r\n    }, 100);\r\n    \r\n    \r\n    changePicsOrder(); //initial filling picsArray\r\n    redrawCarousel(0); //initial draw the carousel\r\n    \r\n    \r\n    bgMovement(bgMoveSpeed);\r\n    \r\n    \r\n    \r\n    return function destroy() {\r\n            carousel.removeEventListener('mousedown', e => mouseDownActions(e))\r\n            carousel.removeEventListener('mousemove', e => mouseMoveActions(e))\r\n            carousel.removeEventListener('mouseup', e => stopMove(e));\r\n            carousel.removeEventListener('mouseout', e => stopMove(e));\r\n    \r\n            clearInterval(bgMoveCounter);\r\n            clearInterval(carouselInertionTimer);\r\n            clearInterval(inertiaCounter); \r\n            clearTimeout(bgMoveCoundown); \r\n            \r\n            //console.log('destroyed');\r\n    \r\n        }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    "],"file":"slider-max.js"}