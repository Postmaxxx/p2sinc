{"version":3,"names":[],"mappings":"","sources":["components/carousel-max.js"],"sourcesContent":["export function makeCarousel(params) {\n\nconst {destinationData, imagesPaths, imgWidth, imgGap, bgMoveSpeed, timeToBgMove, inertiaStep, inertiaSensivity, expandPath, expandIconWidth, expandIconHeignt, nodeForFullsize, transitionTime, closePath } = params;\nconst fadeBlock = document.querySelector(\".fade-block\");\nconst carousel = document.querySelector(`[data-carousel='${destinationData}']`) ;\nconst destinationClass = \"carousel_max\";\n\nlet carouselHeight = carousel.clientHeight;\nlet carouselWidth = carousel.clientWidth;\n\nconst totalImages = imagesPaths.length; \n\nlet mouseEnterPoint, dxMouse = 0; //mouseX - start amoun X of mouse when button pressed, dxMouse - the difference between mouseX and current mouse X position \nlet dxRibbon = - (imgWidth + imgGap)*2 + (carouselWidth - (imgWidth + imgGap))/2; //offset of Ribbon\nlet move = false; //is gallery moving now\n\nlet picsArray = [...imagesPaths]; //the array length=5 for images to show\npicsArray = picsArray.slice(0, 5)\n\nlet basePic = totalImages - 2; //the order of the first picture in picsArray\nconst carouselCenter = dxRibbon;\n\nlet inertiaCurrentMouseX; //current mouse x coordinate\nlet inertiaPreviousMouseX; //last iteration mouse x coordinate\nlet inertiaSpeedX = 0; //speed of moving while inertia, decreasing by *inertiaStep\nlet inertiaCounter; //setinterval for declining speed while inertia\nlet carouselInertionTimer; //setinterva for calculating mouse speed\nlet expandImageShown = false; //is Espand image shown now\n\nlet bgMove; //moving without dragging, speed\nlet bgMoveCounter; //setinterval for background movement\nlet bgMoveCoundown; //setTimeout for background movement restore\n\n//creation the carousel html and styles\ncarousel.style.maxWidth = '100%';\ncarousel.style.height = carouselHeight + 'px';\ncarousel.style.position = 'relative';\ncarousel.style.overflow = 'hidden';\ncarousel.style.whiteSpace = 'nowrap';\ncarousel.style.userSelect = 'none';\ncarousel.style.boxSizing = 'border-box';\ncarousel.style.transition = `${transitionTime}s`;\n\n\ncarousel.innerHTML = `\n    <div class=\"${destinationClass}-images-container\">\n        ${picsArray.map((el, index) => {\n            return (`\n            <div class=\"${destinationClass}-img-wrapper\">\n                <div class=\"${destinationClass}-img-container\">\n                    <lottie-player data-role=\"expand\" class=\"${destinationClass}-expand-icon\" autoplay loop mode=\"normal\" src=\"${expandPath}\" ></lottie-player>\n                </div>\n            </div>\n            `)\n        }).join('')}\n    </div>\n    `\n\n\nconst ribbonImages = carousel.querySelector(`.${destinationClass}-images-container`); //The container for all 5 images\nconst imgWrapperList = carousel.querySelectorAll(`.${destinationClass}-img-wrapper`); //The list of all 5 containers\nconst imgContainerList = carousel.querySelectorAll(`.${destinationClass}-img-container`); //The list of all 5 containers\nconst imgExpandIconList = carousel.querySelectorAll(`.${destinationClass}-expand-icon`); //The list of all 5 containers\n\n\n\nconst sourceNode = document.querySelector(`.${nodeForFullsize}`);\nsourceNode.insertAdjacentHTML('afterbegin', `\n    <div class=\"${destinationClass}-full-screen-wrapper\">\n        <div class=\"${destinationClass}-full-screen-image-closer\"></div>\n        <div class=\"${destinationClass}-img-wrapper\">\n            <img class=\"${destinationClass}-full-screen-image\">\n        </div>\n        <div class=\"${destinationClass}-description\">\n            <span class=\"${destinationClass}-descr-text\" href=\"#\"></span>\n            <a class=\"${destinationClass}-link\" href=\"#\"></a>\n        </div>\n    </div>`)\n\nconst imgFullScreenWrapper = document.querySelector(`.${destinationClass}-full-screen-wrapper`); //The container for fullscreen image\nconst imgFullScreenImage = imgFullScreenWrapper.querySelector(`.${destinationClass}-full-screen-image`); //The container for fullscreen image\nconst imgWrapper = imgFullScreenWrapper.querySelector(`.${destinationClass}-img-wrapper`); //The container for fullscreen image\nconst imgFullScreenCloser = imgFullScreenWrapper.querySelector(`.${destinationClass}-full-screen-image-closer`); //The container for fullscreen image\nconst imgDescr = imgFullScreenWrapper.querySelector(`.${destinationClass}-description`); \nconst imgDescrText = imgFullScreenWrapper.querySelector(`.${destinationClass}-descr-text`); \nconst imgDescrLink = imgFullScreenWrapper.querySelector(`.${destinationClass}-link`); \n\n\n\n//styles injection\nribbonImages.style.cssText = `\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    position: relative;\n    width: auto;\n    display: inline-block;\n    pointer-events: none;\n    `\n\nimgWrapperList.forEach((el) => {\n    el.style.cssText = `\n        width: ${imgWidth}px;\n        height: ${carouselHeight}px;\n        padding: 0;\n        padding-left: ${imgGap/2}px; \n        padding-right: ${imgGap/2 }px;\n        display: inline-block;\n        pointer-events: none;\n        position: relative;\n    `\n})\n    \n\n\n\n//console.log(imgContainerList); \n\nimgContainerList.forEach((el) => {\n    el.style.cssText = `\n        width: 100%;\n        height: ${carouselHeight}px;\n        padding: 0;\n        box-sizing: border-box;\n        display: inline-block;\n        background-size: auto 100%;\n        background-position: 50% center;\n        pointer-events: none;\n        overflow: hidden;\n        `\n    })\n\n\nimgExpandIconList.forEach((el, index) => {\n    el.style.cssText = `\n        width: ${expandIconWidth}px;\n        height: ${expandIconHeignt}px;\n        position: absolute;\n        top: 85%;\n        left: ${(imgGap - expandIconWidth) / 2}px;\n        pointer-events: auto;\n        cursor: pointer;\n    `\n})\n\n\n\nfunction defaultFullScreenStyles() {\n    imgFullScreenWrapper.style.cssText = `\n        margin: 0;\n        padding: 0;\n        position: fixed;\n        top: ${carouselHeight / 2}px;\n        left: 50%;\n        width: 0px;\n        z-index: 1000;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        transition: ${transitionTime}s;\n    `;\n\n    imgFullScreenImage.style.cssText = `\n        object-position: 50% 50%\n    `\n\n    imgFullScreenCloser.style.cssText = `\n        height: 0;\n        width: 0;\n        border-radius: 50%;\n        position: relarive;\n        align-self: flex-end;\n        z-index: 2000;\n        pointer-events: auto;\n        cursor: pointer;\n        margin-right: 30px;\n        transition: ${transitionTime}s;\n        background-image: url(\"${closePath}\");\n        background-size: 40% 40%;\n        background-position: center center;\n        background-repeat: no-repeat;\n        background-color: #FFF;\n    `;\n\n    imgDescr.style.cssText = `\n        top: ${carouselHeight-120}px;\n        width: 0;\n        height: 0;\n        padding: 25px 40px;\n        border-radius: 40px;\n        margin-right: 30px;\n        align-items: center;\n        justify-content: center;\n        margin-left: auto;\n        color: white;\n        display: none;\n        transition: ${transitionTime}s;\n    `;\n        //background-color: #777;\n    //max-width: 300px;\n\n\n    imgDescrText.style.cssText = `\n        font-family: \"GTWalsheimMedium\";\n        font-size: 24px;\n        pointer-events: auto;\n        color: #FFF;\n        transition: ${transitionTime}s;\n    `;\n\n\n    imgDescrLink.style.cssText = `\n        pointer-events: auto;\n        color: #FFF;\n        transition: ${transitionTime}s;\n        font-family: \"GTWalsheimMedium\";\n        font-size: 12px;\n    `;\n\n\n    //carousel.style.opacity = '100%';\n    fadeBlock.classList.remove(\"fade\");\n}\n\ndefaultFullScreenStyles();\n\n\n\n\n\n\nconst changePicsOrder = (direction) => { //change pictures to show in picsArray and show them. Filled from imagesPaths\n    if (direction === '+') { //pictures offset when moving left\n        (basePic > totalImages -1) ? basePic = 1 : basePic++\n    }\n    if (direction === '-') {//pictures offset when moving right\n        (basePic < 1) ? basePic = totalImages-1 : basePic--\n    }\n    \n    for (var index = 0; index < 5; index++) {\n        picsArray[index] = (basePic+index < totalImages) ? imagesPaths[index+basePic] : imagesPaths[basePic+index - totalImages]\n    }\n    \n\n    imgContainerList.forEach((el, index) => {  //change all 5 images to show in imagesList\n        el.style.backgroundImage = `url(${picsArray[index][0]}`;\n        el.childNodes[1].dataset.path = picsArray[index][0]; //changing path links for expanding images\n        el.childNodes[1].dataset.descr = picsArray[index][1]; //changing path links for expanding images\n        el.childNodes[1].dataset.link = picsArray[index][2]; //changing path links for expanding images\n        //<a class=\"${destinationClass}-link\" href=\"${imagesPaths[index][2]}\">${imagesPaths[index][1]}</a>\n    })\n\n}\n\n\nconst changeImgOffset = (currentPos) => { //changing offset for all pictures\n    imgContainerList.forEach((el, index) => {\n            let centerDx = currentPos - carouselCenter - (imgWidth + imgGap)*(2-index); //the offset between central position and current position\n            let k = 50 + 50/((carouselWidth + imgWidth) / 2) * centerDx;\n            el.style.backgroundPosition = `${k}% center`;\n    })\n}\n\n\nconst redrawCarousel = (dx) => { //changing the position of ribbonImages\n    if (dx + dxRibbon > -(imgWidth + imgGap - (carouselWidth-imgWidth -imgGap)/2)) { //if the offset is more than 1 picture width\n        dxRibbon = dxRibbon - imgWidth - imgGap; \n        changePicsOrder('-');\n\n    }\n    if (dx + dxRibbon < -(imgWidth + imgGap)*3 + (carouselWidth-imgWidth -imgGap)/2  ) { //if the offset is more than 1 picture width\n        dxRibbon = dxRibbon + imgWidth + imgGap; \n        changePicsOrder('+');\n    }\n    \n    ribbonImages.style.left = `${dx + dxRibbon}px`; //change ribbon position\n    changeImgOffset(dx + dxRibbon); //change images offset\n\n\n    \n}\n\n\n\nfunction expandImage(path, descr, link) {\n\n    //imgFullScreenWrapper.style.top = `-15px`;\n    imgFullScreenWrapper.style.top = `-10px`;\n    imgFullScreenWrapper.style.zIndex = `9000`;\n\n    imgFullScreenWrapper.style.left = `1vw`;\n    imgFullScreenWrapper.style.width = `98%`;\n    imgFullScreenWrapper.style.height = `${carouselHeight + 285}px`;\n\n\n    imgWrapper.style.width = `100%`;\n    imgWrapper.style.maxHeight = `${carouselHeight + 285}px`;\n    imgWrapper.style.overflow = `hidden`;\n\n\n    imgFullScreenImage.style.width = `100%`;\n    imgFullScreenImage.style.content = `url(${path})`;\n    //imgFullScreenImage.style.objectFit = `cover`;\n    imgFullScreenImage.style.objectPosition = `100% 100%`;\n    imgFullScreenImage.style.height = `auto`;\n\n\n    imgDescr.style.position = `relative`;\n    imgDescr.style.top = `-100px`;\n    imgDescr.style.display = 'flex';\n    imgDescr.style.height = 'auto';\n    imgDescr.style.width = '90%';\n    imgDescr.style.justifyContent = 'space-between';\n    \n    imgDescr.style.marginLeft = 'auto';\n    imgDescr.style.marginRight = 'auto';\n\n\n\n    imgDescrText.innerHTML = descr;\n\n    imgDescrLink.innerHTML = 'Read More &#8594';\n    imgDescrLink.href = link;\n\n    imgFullScreenCloser.style.position = `relative`;\n    imgFullScreenCloser.style.top = `50px`;\n    imgFullScreenCloser.style.height = `25px`;\n    imgFullScreenCloser.style.minHeight = `25px`;\n    imgFullScreenCloser.style.width = `25px`;\n    imgFullScreenCloser.style.display = 'block'\n\n    //carousel.style.opacity = '50%';\n    fadeBlock.classList.add(\"fade\");\n}\n\n\n\n\nfunction closeImage() {\n    defaultFullScreenStyles();\n    expandImageShown = false;\n    setTimeoutToMove();\n    imgFullScreenCloser.removeEventListener('click', e => {\n        closeImage(e);\n    })\n}\n\n\nimgFullScreenCloser.addEventListener('click', e => closeImage(e))\n\n\n\nfunction mouseDownActions(e) {\n    if (e.target.dataset.role === 'expand') {\n        expandImageShown = true;\n        expandImage(e.target.dataset.path,e.target.dataset.descr,e.target.dataset.link);\n        clearTimeoutToMove();\n    }\n\n    clearInterval(inertiaCounter); //stop the inertia\n    //clearTimeout(bgMoveCoundown); //stop the countdown\n    bgMove = 0;\n    move = true;\n    mouseEnterPoint = e.offsetX;\n    carousel.classList.add(`${destinationClass}_grabbed`);\n}\n\n\ncarousel.addEventListener('mousedown', e => mouseDownActions(e))\n\nfunction mouseMoveActions(e) {\n    if (move) {\n        dxMouse = e.offsetX - mouseEnterPoint;\n        redrawCarousel(dxMouse);\n    }\n}\n\ncarousel.addEventListener('mousemove', e => mouseMoveActions(e))\n\n\nfunction setTimeoutToMove() {\n    if (!bgMoveCoundown) {\n        bgMoveCoundown = setTimeout(() => {\n            //console.log(\"move again\");\n            bgMove = bgMoveSpeed;\n            bgMovement(bgMove);\n            clearTimeoutToMove();\n        }, timeToBgMove);\n        //console.log(\"start cndn \",bgMoveCoundown);\n    }\n}\n\n\n\nfunction clearTimeoutToMove() {\n    if (bgMoveCoundown) {\n        //console.log(\"delete contdown \", bgMoveCoundown);\n        clearTimeout(bgMoveCoundown);\n        bgMoveCoundown = undefined;\n    }\n}\n\n\nfunction inertiaMovement(dx) {\n    clearInterval(inertiaCounter); //fix bug when some timers start simultaniously\n\n    inertiaCounter = setInterval((e) => {\n        dx = dx * inertiaStep;\n        if (Math.abs(dx) <= 1) {\n            inertiaSpeedX = 0;\n            clearInterval(inertiaCounter);\n            setTimeoutToMove();\n        } else {\n            dxRibbon = dxRibbon - dx/25;\n            redrawCarousel(0);\n        }\n    }, 1);\n}\n\n\nfunction bgMovement(dx) {\n    clearInterval(bgMoveCounter);\n    bgMoveCounter = setInterval((e) => {\n        if (bgMove === 0) {\n            clearInterval(bgMoveCounter);\n        } else {\n            dxRibbon = dxRibbon - dx/25;\n            redrawCarousel(0);\n        }\n    }, 1);\n}\n\n\nconst stopMove = (e) => { //stop move the carousel\n    move = false;\n    //restartMoveTimer = true;\n    dxRibbon = dxRibbon + dxMouse; //fixing the offset\n    dxMouse = 0; \n \n    inertiaSpeedX = inertiaPreviousMouseX - inertiaCurrentMouseX ;\n    if (Math.abs(inertiaSpeedX) > inertiaSensivity) { //has an inertion\n        inertiaMovement(inertiaSpeedX);\n    }\n    carousel.classList.remove(`${destinationClass}_grabbed`)\n\n}\n\n\n\ncarousel.addEventListener('mouseup', e => {\n    if (!expandImageShown) {\n        setTimeoutToMove();\n    }\n    stopMove(e);\n});\n\n\ncarousel.addEventListener('mouseout', e => stopMove(e));\n\ncarouselInertionTimer = setInterval((e) => { //check mouse speed every 100ms\n    inertiaPreviousMouseX = inertiaCurrentMouseX;\n    inertiaCurrentMouseX = dxMouse;\n}, 100);\n\nchangePicsOrder(); //initial filling picsArray\nredrawCarousel(0); //initial draw the carousel\n\n\nbgMovement(bgMoveSpeed);\n\n\n\n\nfunction destroy() {\n    carousel.removeEventListener('mousedown', e => mouseDownActions(e))\n    carousel.removeEventListener('mousemove', e => mouseMoveActions(e))\n    carousel.removeEventListener('mouseup', e => stopMove(e));\n    carousel.removeEventListener('mouseout', e => stopMove(e));\n    carousel.removeEventListener('mouseout', e => stopMove(e));\n    imgFullScreenCloser.removeEventListener('click', e => closeImage())\n    \n    clearInterval(bgMoveCounter);\n    clearInterval(carouselInertionTimer);\n    clearInterval(inertiaCounter); \n    clearTimeout(bgMoveCoundown); \n\n}\n\nreturn destroy\n    \n}\n"],"file":"carousel-max.js"}