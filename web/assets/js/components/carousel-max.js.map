{"version":3,"names":[],"mappings":"","sources":["components/carousel-max.js"],"sourcesContent":["export function makeCarousel(params) {\r\n\r\nconst {destinationClass, imagesPaths, imgWidth, imgGap, bgMoveSpeed, timeToBgMove, inertiaStep, inertiaSensivity, expandPath, expandIconWidth, expandIconHeignt, nodeForFullsize, transitionTime, closePath } = params;\r\nconst fadeBlock = document.querySelector(\".fade-block\");\r\nconst carousel = document.querySelector('.'+destinationClass)\r\n\r\nlet carouselHeight = document.querySelector('.'+destinationClass).clientHeight;\r\nlet carouselWidth = document.querySelector('.'+destinationClass).clientWidth;\r\n\r\nconst totalImages = imagesPaths.length; \r\n\r\nlet mouseEnterPoint, dxMouse = 0; //mouseX - start amoun X of mouse when button pressed, dxMouse - the difference between mouseX and current mouse X position \r\nlet dxRibbon = - (imgWidth + imgGap)*2 + (carouselWidth - (imgWidth + imgGap))/2; //offset of Ribbon\r\nlet move = false; //is gallery moving now\r\n\r\nlet picsArray = [...imagesPaths]; //the array length=5 for images to show\r\npicsArray = picsArray.slice(0, 5)\r\n\r\nlet basePic = totalImages - 2; //the order of the first picture in picsArray\r\nconst carouselCenter = dxRibbon;\r\n\r\nlet inertiaCurrentMouseX; //current mouse x coordinate\r\nlet inertiaPreviousMouseX; //last iteration mouse x coordinate\r\nlet inertiaSpeedX = 0; //speed of moving while inertia, decreasing by *inertiaStep\r\nlet inertiaCounter; //setinterval for declining speed while inertia\r\nlet carouselInertionTimer; //setinterva for calculating mouse speed\r\nlet expandImageShown = false; //is Espand image shown now\r\n\r\nlet bgMove; //moving without dragging, speed\r\nlet bgMoveCounter; //setinterval for background movement\r\nlet bgMoveCoundown; //setTimeout for background movement restore\r\n\r\n//creation the carousel html and styles\r\ncarousel.style.maxWidth = '100%';\r\ncarousel.style.height = carouselHeight + 'px';\r\ncarousel.style.position = 'relative';\r\ncarousel.style.overflow = 'hidden';\r\ncarousel.style.whiteSpace = 'nowrap';\r\ncarousel.style.userSelect = 'none';\r\ncarousel.style.boxSizing = 'border-box';\r\ncarousel.style.transition = `${transitionTime}s`;\r\n\r\n\r\ncarousel.innerHTML = `\r\n    <div class=\"${destinationClass}-images-container\">\r\n        ${picsArray.map((el, index) => {\r\n            return (`\r\n            <div class=\"${destinationClass}-img-wrapper\">\r\n                <div class=\"${destinationClass}-img-container\">\r\n                    <lottie-player data-role=\"expand\" class=\"${destinationClass}-expand-icon\" autoplay loop mode=\"normal\" src=\"${expandPath}\" ></lottie-player>\r\n                </div>\r\n            </div>\r\n            `)\r\n        }).join('')}\r\n    </div>\r\n    `\r\n\r\n\r\nconst ribbonImages = document.querySelector(`.${destinationClass}-images-container`); //The container for all 5 images\r\nconst imgWrapperList = document.querySelectorAll(`.${destinationClass}-img-wrapper`); //The list of all 5 containers\r\nconst imgContainerList = document.querySelectorAll(`.${destinationClass}-img-container`); //The list of all 5 containers\r\nconst imgExpandIconList = document.querySelectorAll(`.${destinationClass}-expand-icon`); //The list of all 5 containers\r\n\r\n\r\n\r\nconst sourceNode = document.querySelector(`.${nodeForFullsize}`);\r\nsourceNode.insertAdjacentHTML('afterbegin', `\r\n    <div class=\"${destinationClass}-full-screen-wrapper\">\r\n        <div class=\"${destinationClass}-full-screen-image-closer\"></div>\r\n        <div class=\"${destinationClass}-img-wrapper\">\r\n            <img class=\"${destinationClass}-full-screen-image\">\r\n        </div>\r\n        <div class=\"${destinationClass}-description\">\r\n            <a class=\"${destinationClass}-link\" href=\"#\"></a>\r\n        </div>\r\n    </div>`)\r\nconst imgFullScreenWrapper = document.querySelector(`.${destinationClass}-full-screen-wrapper`); //The container for fullscreen image\r\nconst imgFullScreenImage = document.querySelector(`.${destinationClass}-full-screen-image`); //The container for fullscreen image\r\nconst imgWrapper = document.querySelector(`.${destinationClass}-img-wrapper`); //The container for fullscreen image\r\nconst imgFullScreenCloser = document.querySelector(`.${destinationClass}-full-screen-image-closer`); //The container for fullscreen image\r\nconst imgDescr = document.querySelector(`.${destinationClass}-description`); \r\nconst imgDescrLink = document.querySelector(`.${destinationClass}-link`); \r\n\r\n\r\n\r\n//styles injection\r\nribbonImages.style.cssText = `\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    width: auto;\r\n    display: inline-block;\r\n    pointer-events: none;\r\n    `\r\n\r\nimgWrapperList.forEach((el) => {\r\n    el.style.cssText = `\r\n        width: ${imgWidth}px;\r\n        height: ${carouselHeight}px;\r\n        padding: 0;\r\n        padding-left: ${imgGap/2}px; \r\n        padding-right: ${imgGap/2 }px;\r\n        display: inline-block;\r\n        pointer-events: none;\r\n        position: relative;\r\n    `\r\n})\r\n    \r\n\r\n\r\n\r\n//console.log(imgContainerList); \r\n\r\nimgContainerList.forEach((el) => {\r\n    el.style.cssText = `\r\n        width: 100%;\r\n        height: ${carouselHeight}px;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        background-size: auto 100%;\r\n        background-position: 50% center;\r\n        pointer-events: none;\r\n        overflow: hidden;\r\n        `\r\n    })\r\n\r\n\r\nimgExpandIconList.forEach((el, index) => {\r\n    el.style.cssText = `\r\n        width: ${expandIconWidth}px;\r\n        height: ${expandIconHeignt}px;\r\n        position: absolute;\r\n        top: 85%;\r\n        left: ${(imgGap - expandIconWidth) / 2}px;\r\n        pointer-events: auto;\r\n        cursor: pointer;\r\n    `\r\n})\r\n\r\n\r\n\r\nfunction defaultFullScreenStyles() {\r\n    imgFullScreenWrapper.style.cssText = `\r\n        margin: 0;\r\n        padding: 0;\r\n        position: fixed;\r\n        top: ${carouselHeight / 2}px;\r\n        left: 50%;\r\n        width: 0px;\r\n        z-index: 1000;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        transition: ${transitionTime}s;\r\n    `;\r\n\r\n    imgFullScreenImage.style.cssText = `\r\n        object-position: 50% 50%\r\n    `\r\n\r\n    imgFullScreenCloser.style.cssText = `\r\n        height: 0;\r\n        width: 0;\r\n        border-radius: 50%;\r\n        background-color: #404040;\r\n        position: relarive;\r\n        align-self: flex-end;\r\n        z-index: 2000;\r\n        pointer-events: auto;\r\n        cursor: pointer;\r\n        margin-right: 30px;\r\n        transition: ${transitionTime}s;\r\n        background-image: url(${closePath});\r\n        background-size: 60% 60%;\r\n        background-position: center center;\r\n        background-repeat: no-repeat;\r\n    `;\r\n\r\n    imgDescr.style.cssText = `\r\n        top: ${carouselHeight-120}px;\r\n        width: 0;\r\n        height: 0;\r\n        padding: 15px;\r\n        background-color: #404040;\r\n        border-radius: 30px;\r\n        margin-right: 30px;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-left: auto;\r\n        max-width: 300px;\r\n        color: white;\r\n        display: none;\r\n        transition: ${transitionTime}s;\r\n    `;\r\n\r\n    imgDescrLink.style.cssText = `\r\n        pointer-events: auto;\r\n        color: #FFF;\r\n        transition: ${transitionTime}s;\r\n        font-family: \"GTWalsheimMedium\";\r\n        font-size: 12px;\r\n    `;\r\n\r\n\r\n    //carousel.style.opacity = '100%';\r\n    fadeBlock.classList.remove(\"fade\");\r\n}\r\n\r\ndefaultFullScreenStyles();\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst changePicsOrder = (direction) => { //change pictures to show in picsArray and show them. Filled from imagesPaths\r\n    if (direction === '+') { //pictures offset when moving left\r\n        (basePic > totalImages -1) ? basePic = 1 : basePic++\r\n    }\r\n    if (direction === '-') {//pictures offset when moving right\r\n        (basePic < 1) ? basePic = totalImages-1 : basePic--\r\n    }\r\n    \r\n    for (var index = 0; index < 5; index++) {\r\n        picsArray[index] = (basePic+index < totalImages) ? imagesPaths[index+basePic] : imagesPaths[basePic+index - totalImages]\r\n    }\r\n    \r\n\r\n    imgContainerList.forEach((el, index) => {  //change all 5 images to show in imagesList\r\n        el.style.backgroundImage = `url(${picsArray[index][0]}`;\r\n        el.childNodes[1].dataset.path = picsArray[index][0]; //changing path links for expanding images\r\n        el.childNodes[1].dataset.descr = picsArray[index][1]; //changing path links for expanding images\r\n        el.childNodes[1].dataset.link = picsArray[index][2]; //changing path links for expanding images\r\n        //<a class=\"${destinationClass}-link\" href=\"${imagesPaths[index][2]}\">${imagesPaths[index][1]}</a>\r\n    })\r\n\r\n}\r\n\r\n\r\nconst changeImgOffset = (currentPos) => { //changing offset for all pictures\r\n    imgContainerList.forEach((el, index) => {\r\n            let centerDx = currentPos - carouselCenter - (imgWidth + imgGap)*(2-index); //the offset between central position and current position\r\n            let k = 50 + 50/((carouselWidth + imgWidth) / 2) * centerDx;\r\n            el.style.backgroundPosition = `${k}% center`;\r\n    })\r\n}\r\n\r\n\r\nconst redrawCarousel = (dx) => { //changing the position of ribbonImages\r\n    if (dx + dxRibbon > -(imgWidth + imgGap - (carouselWidth-imgWidth -imgGap)/2)) { //if the offset is more than 1 picture width\r\n        dxRibbon = dxRibbon - imgWidth - imgGap; \r\n        changePicsOrder('-');\r\n\r\n    }\r\n    if (dx + dxRibbon < -(imgWidth + imgGap)*3 + (carouselWidth-imgWidth -imgGap)/2  ) { //if the offset is more than 1 picture width\r\n        dxRibbon = dxRibbon + imgWidth + imgGap; \r\n        changePicsOrder('+');\r\n    }\r\n    \r\n    ribbonImages.style.left = `${dx + dxRibbon}px`; //change ribbon position\r\n    changeImgOffset(dx + dxRibbon); //change images offset\r\n\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction expandImage(path, descr, link) {\r\n\r\n    //imgFullScreenWrapper.style.top = `-15px`;\r\n    imgFullScreenWrapper.style.top = `-10px`;\r\n    imgFullScreenWrapper.style.zIndex = `9000`;\r\n\r\n    imgFullScreenWrapper.style.left = `1vw`;\r\n    imgFullScreenWrapper.style.width = `98%`;\r\n    imgFullScreenWrapper.style.height = `${carouselHeight + 285}px`;\r\n\r\n\r\n    imgWrapper.style.width = `100%`;\r\n    imgWrapper.style.maxHeight = `${carouselHeight + 285}px`;\r\n    imgWrapper.style.overflow = `hidden`;\r\n\r\n\r\n    imgFullScreenImage.style.width = `100%`;\r\n    imgFullScreenImage.style.content = `url(${path})`;\r\n    //imgFullScreenImage.style.objectFit = `cover`;\r\n    imgFullScreenImage.style.objectPosition = `100% 100%`;\r\n    imgFullScreenImage.style.height = `auto`;\r\n\r\n\r\n    imgDescr.style.position = `relative`;\r\n    imgDescr.style.top = `-100px`;\r\n    imgDescr.style.display = 'block'\r\n    imgDescr.style.height = 'auto'\r\n    imgDescr.style.width = 'auto'\r\n\r\n\r\n    imgDescrLink.innerHTML = descr;\r\n    imgDescrLink.href = link;\r\n\r\n    imgFullScreenCloser.style.position = `relative`;\r\n    imgFullScreenCloser.style.top = `50px`;\r\n    imgFullScreenCloser.style.height = `25px`;\r\n    imgFullScreenCloser.style.minHeight = `25px`;\r\n    imgFullScreenCloser.style.width = `25px`;\r\n    imgFullScreenCloser.style.display = 'block'\r\n\r\n    //carousel.style.opacity = '50%';\r\n    fadeBlock.classList.add(\"fade\");\r\n}\r\n\r\n\r\n\r\n\r\nfunction closeImage() {\r\n    defaultFullScreenStyles();\r\n    expandImageShown = false;\r\n    setTimeoutToMove();\r\n    imgFullScreenCloser.removeEventListener('click', e => {\r\n        closeImage(e);\r\n    })\r\n}\r\n\r\n\r\nimgFullScreenCloser.addEventListener('click', e => closeImage(e))\r\n\r\n\r\n\r\nfunction mouseDownActions(e) {\r\n    if (e.target.dataset.role === 'expand') {\r\n        expandImageShown = true;\r\n        expandImage(e.target.dataset.path,e.target.dataset.descr,e.target.dataset.link);\r\n        clearTimeoutToMove();\r\n    }\r\n\r\n    clearInterval(inertiaCounter); //stop the inertia\r\n    //clearTimeout(bgMoveCoundown); //stop the countdown\r\n    bgMove = 0;\r\n    move = true;\r\n    mouseEnterPoint = e.offsetX;\r\n    carousel.classList.add(`${destinationClass}_grabbed`);\r\n}\r\n\r\n\r\ncarousel.addEventListener('mousedown', e => mouseDownActions(e))\r\n\r\nfunction mouseMoveActions(e) {\r\n    if (move) {\r\n        dxMouse = e.offsetX - mouseEnterPoint;\r\n        redrawCarousel(dxMouse);\r\n    }\r\n}\r\n\r\ncarousel.addEventListener('mousemove', e => mouseMoveActions(e))\r\n\r\n\r\nfunction setTimeoutToMove() {\r\n    if (!bgMoveCoundown) {\r\n        bgMoveCoundown = setTimeout(() => {\r\n            console.log(\"move again\");\r\n            bgMove = bgMoveSpeed;\r\n            bgMovement(bgMove);\r\n            clearTimeoutToMove();\r\n        }, timeToBgMove);\r\n        console.log(\"start cndn \",bgMoveCoundown);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction clearTimeoutToMove() {\r\n    if (bgMoveCoundown) {\r\n        console.log(\"delete contdown \", bgMoveCoundown);\r\n        clearTimeout(bgMoveCoundown);\r\n        bgMoveCoundown = undefined;\r\n    }\r\n}\r\n\r\n\r\nfunction inertiaMovement(dx) {\r\n    clearInterval(inertiaCounter); //fix bug when some timers start simultaniously\r\n\r\n    inertiaCounter = setInterval((e) => {\r\n        dx = dx * inertiaStep;\r\n        if (Math.abs(dx) <= 1) {\r\n            inertiaSpeedX = 0;\r\n            clearInterval(inertiaCounter);\r\n            setTimeoutToMove();\r\n        } else {\r\n            dxRibbon = dxRibbon - dx/25;\r\n            redrawCarousel(0);\r\n        }\r\n    }, 1);\r\n}\r\n\r\n\r\nfunction bgMovement(dx) {\r\n    clearInterval(bgMoveCounter);\r\n    bgMoveCounter = setInterval((e) => {\r\n        if (bgMove === 0) {\r\n            clearInterval(bgMoveCounter);\r\n        } else {\r\n            dxRibbon = dxRibbon - dx/25;\r\n            redrawCarousel(0);\r\n        }\r\n    }, 1);\r\n}\r\n\r\n\r\nconst stopMove = (e) => { //stop move the carousel\r\n    move = false;\r\n    //restartMoveTimer = true;\r\n    dxRibbon = dxRibbon + dxMouse; //fixing the offset\r\n    dxMouse = 0; \r\n \r\n    inertiaSpeedX = inertiaPreviousMouseX - inertiaCurrentMouseX ;\r\n    if (Math.abs(inertiaSpeedX) > inertiaSensivity) { //has an inertion\r\n        inertiaMovement(inertiaSpeedX);\r\n    }\r\n    carousel.classList.remove(`${destinationClass}_grabbed`)\r\n\r\n}\r\n\r\n\r\n\r\ncarousel.addEventListener('mouseup', e => {\r\n    if (!expandImageShown) {\r\n        setTimeoutToMove();\r\n    }\r\n    stopMove(e);\r\n});\r\n\r\n\r\ncarousel.addEventListener('mouseout', e => stopMove(e));\r\n\r\ncarouselInertionTimer = setInterval((e) => { //check mouse speed every 100ms\r\n    inertiaPreviousMouseX = inertiaCurrentMouseX;\r\n    inertiaCurrentMouseX = dxMouse;\r\n}, 100);\r\n\r\nchangePicsOrder(); //initial filling picsArray\r\nredrawCarousel(0); //initial draw the carousel\r\n\r\n\r\nbgMovement(bgMoveSpeed);\r\n\r\n\r\n\r\n\r\nfunction destroy() {\r\n    carousel.removeEventListener('mousedown', e => mouseDownActions(e))\r\n    carousel.removeEventListener('mousemove', e => mouseMoveActions(e))\r\n    carousel.removeEventListener('mouseup', e => stopMove(e));\r\n    carousel.removeEventListener('mouseout', e => stopMove(e));\r\n    carousel.removeEventListener('mouseout', e => stopMove(e));\r\n    imgFullScreenCloser.removeEventListener('click', e => closeImage())\r\n    \r\n    clearInterval(bgMoveCounter);\r\n    clearInterval(carouselInertionTimer);\r\n    clearInterval(inertiaCounter); \r\n    clearTimeout(bgMoveCoundown); \r\n\r\n}\r\n\r\nreturn destroy\r\n        \r\n\r\n}\r\n\r\n\r\n"],"file":"carousel-max.js"}