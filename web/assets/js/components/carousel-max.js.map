{"version":3,"names":[],"mappings":"","sources":["components/carousel-max.js"],"sourcesContent":["export function makeCarousel(params) {\r\n\r\nconst {destinationClass, imagesPaths, carouselWidth, carouselHeight, imgWidth, imgGap, bgMoveSpeed, timeToBgMove, inertiaStep, inertiaSensivity, expandPath, expandIconWidth } = params;\r\nconst carousel = document.querySelector('.'+destinationClass)\r\nconst totalImages = imagesPaths.length; \r\n\r\nlet mouseEnterPoint, dxMouse = 0; //mouseX - start amoun X of mouse when button pressed, dxMouse - the difference between mouseX and current mouse X position \r\nlet dxRibbon = - (imgWidth + imgGap)*2 + (carouselWidth - (imgWidth + imgGap))/2; //offset of Ribbon\r\nlet move = false; //is gallery moving now\r\nlet picsArray = [1,2,3,4,5]; //the array length=5 for images to show\r\nlet basePic = totalImages - 2; //the order of the first picture in picsArray\r\nconst carouselCenter = dxRibbon;\r\n//offsetMax = max offset of image (left or right)\r\n\r\nlet inertiaCurrentMouseX; //current mouse x coordinate\r\nlet inertiaPreviousMouseX; //last iteration mouse x coordinate\r\nlet inertiaSpeedX = 0; //speed of moving while inertia, decreasing by *inertiaStep\r\nlet inertiaCounter; //setinterval for declining speed while inertia\r\nlet carouselInertionTimer; //setinterva for calculating mouse speed\r\n\r\n\r\nlet bgMove; //moving without dragging, speed\r\nlet bgMoveCounter; //setinterval for background movement\r\nlet bgMoveCoundown; //setTimeout for background movement restore\r\n\r\n//creation the carousel html and styles\r\ncarousel.style.maxWidth = carouselWidth + 'px';\r\ncarousel.style.height = carouselHeight + 'px';\r\ncarousel.style.position = 'relative';\r\ncarousel.style.overflow = 'hidden';\r\ncarousel.style.whiteSpace = 'nowrap';\r\ncarousel.style.userSelect = 'none';\r\ncarousel.style.boxSizing = 'border-box';\r\n\r\n\r\ncarousel.innerHTML = `\r\n    <div class=\"${destinationClass}-images-container\">\r\n        ${picsArray.map((el) => {\r\n            return (`\r\n            <div class=\"${destinationClass}-img-container\">\r\n                <img class=\"${destinationClass}-expand-icon\" src=\"${expandPath}\">\r\n            </div>\r\n            `)\r\n        }).join('')}\r\n    </div>`\r\n\r\nconst ribbonImages = document.querySelector(`.${destinationClass}-images-container`); //The container for all 5 images\r\nconst imgContainerList = document.querySelectorAll(`.${destinationClass}-img-container`); //The list of all 5 containers\r\nconst imgExpandIconList = document.querySelectorAll(`.${destinationClass}-expand-icon`); //The list of all 5 containers\r\n\r\n\r\n//styles injection\r\nribbonImages.style.cssText = `\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    width: auto;\r\n    display: inline-block;\r\n    pointer-events: none;\r\n`\r\n\r\nimgContainerList.forEach((el) => {\r\n    el.style.cssText = `\r\n        width: ${imgWidth}px;\r\n        height: ${carouselHeight}px;\r\n        margin-left: ${imgGap/2}px; \r\n        margin-right: ${imgGap/2 }px;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        overflow: hidden;\r\n        pointer-events: none;\r\n\r\n        border: 1px solid green;\r\n        background-size: auto 100%;\r\n        background-position: 50% center;\r\n    `\r\n})\r\n\r\n\r\nimgExpandIconList.forEach((el) => {\r\n    el.style.cssText = `\r\n        width: ${expandIconWidth}px;\r\n        height: $auto;\r\n        position: relative;\r\n        top: 450px;\r\n        left: +${expandIconWidth/2}px;\r\n    `\r\n})\r\n\r\n\r\n\r\n\r\n\r\nconst changePicsOrder = (direction) => { //change pictures to show in picsArray and show them. Filled from imagesPaths\r\n    if (direction === '+') { //pictures offset when moving left\r\n        (basePic > totalImages -1) ? basePic = 1 : basePic++\r\n    }\r\n    if (direction === '-') {//pictures offset when moving right\r\n        (basePic < 1) ? basePic = totalImages-1 : basePic--\r\n    }\r\n    \r\n    for (var index = 0; index < 5; index++) {\r\n        picsArray[index] = (basePic+index < totalImages) ? imagesPaths[index+basePic] : imagesPaths[basePic+index - totalImages] \r\n    }\r\n    \r\n\r\n    imgContainerList.forEach((el, index) => {  //change all 5 images to show in imagesList\r\n        el.style.backgroundImage = `url(${picsArray[index]}`;\r\n    })\r\n\r\n}\r\n\r\n\r\nconst changeImgOffset = (currentPos) => { //changing offset for all pictures\r\n    imgContainerList.forEach((el, index) => {\r\n            let centerDx = currentPos - carouselCenter - (imgWidth + imgGap)*(2-index); //the offset between central position and current position\r\n            let k = 50 + 50/((carouselWidth + imgWidth) / 2) * centerDx;\r\n            el.style.backgroundPosition = `${k}% center`;\r\n    })\r\n}\r\n\r\n\r\nconst redrawCarousel = (dx) => { //changing the position of ribbonImages\r\n    if (dx + dxRibbon > -(imgWidth + imgGap - (carouselWidth-imgWidth -imgGap)/2)) { //if the offset is more than 1 picture width\r\n        dxRibbon = dxRibbon - imgWidth - imgGap; \r\n        changePicsOrder('-');\r\n\r\n    }\r\n    if (dx + dxRibbon < -(imgWidth + imgGap)*3 + (carouselWidth-imgWidth -imgGap)/2  ) { //if the offset is more than 1 picture width\r\n        dxRibbon = dxRibbon + imgWidth + imgGap; \r\n        changePicsOrder('+');\r\n    }\r\n    \r\n    ribbonImages.style.left = `${dx + dxRibbon}px`; //change ribbon position\r\n    changeImgOffset(dx + dxRibbon); //change images offset\r\n    \r\n}\r\n\r\n\r\n\r\nfunction expandImage(imagePath) {\r\n}\r\n\r\n\r\nfunction mouseDownActions(e) {\r\n    //if(e.target === )\r\n    \r\n\r\n    clearInterval(inertiaCounter); //stop the inertia\r\n    clearTimeout(bgMoveCoundown); //stop the countdown\r\n    bgMove = 0;\r\n    move = true;\r\n    mouseEnterPoint = e.offsetX;\r\n    carousel.classList.add(`${destinationClass}_grabbed`);\r\n}\r\n\r\n\r\ncarousel.addEventListener('mousedown', e => mouseDownActions(e))\r\n\r\ncarousel.addEventListener('click', e => console.log(e.target))\r\n\r\n\r\n\r\nfunction mouseMoveActions(e) {\r\n    if (move) {\r\n        dxMouse = e.offsetX - mouseEnterPoint;\r\n        redrawCarousel(dxMouse);\r\n    }\r\n}\r\n\r\ncarousel.addEventListener('mousemove', e => mouseMoveActions(e))\r\n\r\n\r\n\r\n\r\nfunction inertiaMovement(dx) {\r\n    clearInterval(inertiaCounter); //fix bug when some timers start simultaniously\r\n\r\n    inertiaCounter = setInterval((e) => {\r\n        dx = dx * inertiaStep;\r\n        if (Math.abs(dx) <= 1) {\r\n            inertiaSpeedX = 0;\r\n            clearInterval(inertiaCounter);\r\n        } else {\r\n            dxRibbon = dxRibbon - dx/25;\r\n            redrawCarousel(0);\r\n        }\r\n    }, 1);\r\n}\r\n\r\n\r\nfunction bgMovement(dx) {\r\n    clearInterval(bgMoveCounter);\r\n    bgMoveCounter = setInterval((e) => {\r\n        if (bgMove === 0) {\r\n            clearInterval(bgMoveCounter);\r\n        } else {\r\n            dxRibbon = dxRibbon - dx/25;\r\n            redrawCarousel(0);\r\n        }\r\n    }, 1);\r\n}\r\n\r\n\r\nconst stopMove = (e) => { //stop move the carousel\r\n    move = false;\r\n    dxRibbon = dxRibbon + dxMouse; //fixing the offset\r\n    dxMouse = 0; \r\n \r\n    inertiaSpeedX = inertiaPreviousMouseX - inertiaCurrentMouseX ;\r\n    if (Math.abs(inertiaSpeedX) > inertiaSensivity) { //has an inertion\r\n        inertiaMovement(inertiaSpeedX);\r\n    }\r\n    carousel.classList.remove(`${destinationClass}_grabbed`)\r\n\r\n    //timeToBgMove\r\n    bgMoveCoundown = setTimeout((e) => {\r\n        bgMove = bgMoveSpeed;\r\n        bgMovement(bgMove);\r\n    }, timeToBgMove);\r\n}\r\n\r\n\r\n\r\ncarousel.addEventListener('mouseup', e => stopMove(e));\r\ncarousel.addEventListener('mouseout', e => stopMove(e));\r\n\r\ncarouselInertionTimer = setInterval((e) => { //check mouse speed every 100ms\r\n    inertiaPreviousMouseX = inertiaCurrentMouseX;\r\n    inertiaCurrentMouseX = dxMouse;\r\n}, 100);\r\n\r\n\r\nchangePicsOrder(); //initial filling picsArray\r\nredrawCarousel(0); //initial draw the carousel\r\n\r\n\r\nbgMovement(bgMoveSpeed);\r\n\r\n\r\n\r\nreturn function destroy() {\r\n        carousel.removeEventListener('mousedown', e => mouseDownActions(e))\r\n        carousel.removeEventListener('mousemove', e => mouseMoveActions(e))\r\n        carousel.removeEventListener('mouseup', e => stopMove(e));\r\n        carousel.removeEventListener('mouseout', e => stopMove(e));\r\n\r\n        clearInterval(bgMoveCounter);\r\n        clearInterval(carouselInertionTimer);\r\n        clearInterval(inertiaCounter); \r\n        clearTimeout(bgMoveCoundown); \r\n        \r\n        //console.log('destroyed');\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],"file":"carousel-max.js"}